** Intro

Проект возможно более быстрой wasm-машины. Он же - план работ.

** Directions

Есть несколько подходов для оптимизации скорости ВМ, которые можно применить. Перечислим их в таком порядке, чтобы ускорение, заложенное в предыдущих шагах, поддерживали следующие шаги.

** Tail-recursuve интерпретатор

Вместо диспетчера построенного на switch или таблице переходов мы размещаем стадии выборки и декодирования в конце каждой инструкции. Ускорение достигается тем, что диспетчеризация имеет историю переходов, связанную с выполняемой командой и предсказатель ветвлений работает эффективнее. Ускорение в 2-3 раза.

** Размещение структур виртуальной машины в регистрах

Вместо обращений в память для всех переменных состояния ВМ мы резервируем соответсвующие регистры. Ускорение достигается использованием более быстрого регистрового доступа и снижением давления на кэш данных. Предполагаемое ускорение - в 1.5-2 раза относительно предыдущего варианта (рассчитано из разницы скорости доступа между регистрами и L1-кэшем данных, отдельно не измерялось)

** Написание сервисных процедур на ассемблере

Оптмимизированные с точки зрения ветвлений сервисные процедуры будут короче и быстрее чем созданные компилятором. Кроме того префиксы переходов позволяют дать дополнительную информацию процессору о вероятности условных переходов (эта техника пока не была задействована). Ожидаемое ускорение 10-20% относительно предыдущего варианта

** Кэширование верхних элементов стека в регистрах

Так как стековые виртуальные машины работают в основном с верхушкой стека, то все незадействованные регистры можно применить для того чтобы кэшировать верхние элементы стека в них. Ожидаемое ускорение - 1.5-2 раза (отдельно не измерялось, вместе со всеми предыдущими вариантами общее измеренное ускорение было 10-кратным.

** Отказ от таблицы сервисных процедур

Мы можем использовать настраиваемый релокейт для всех диспетчеров чтобы упростить команду, которая осуществляет переход к следующей процедуре. Это позволяет избавиться о коссвенной адресации и освободить один регистр, но все процедуры должны иметь одинаковую длину. В случае если процедура длиннее, она может иметь безусловный переход на свой "хвост", который хорошо предсказывается и не приводит к деградации производителльности, если попадает в кэш.

** Выбор набора сервисных процедур в зависимости от текущего состояния стека

При работе некоторых сервисных процедур они вынуждены по окончании своей работы приводить стек в консистентное состояние, чтобы следующие процедуры могли начать свою работу. Мы можем убрать эти накладные расходы сделав варианты процедур, которые работают с неконсистентным состоянием. Тогда завершающая сервисная процедура делает прыжок на вариант следующей выполняемой процедуры, который готов работать с неконсистентным состоянием. Ожидаемое ускорение - от 20%, возможно кратно больше. Эта оптимизация сильно зависит от размера кэша инструкций (так как общее количество процедур увеличиается кратно) - требуется следить чтобы давление на кэш не возрастало.

** Формирование суперинструкций

Ускорение обеспечивается за счет устранения диспетчеризации в конце каждой команды, входящей в SSA-блок. Требуется предварительный анализ кода для определения SSA-блоков (он несложен и не тратит много времени). Суперинструкции могут формировать отложенно, после получения статистики от счетчиков производительности, чтобы избежать формирования суперинструкций для SSA-блоков которые исполняются редко. Ожидается существенное ускорение (от 50% до 3-х кратного относительно предыдущих вариантов)

** Двоичная трансляция с "капсулами"

Формирование "капсул" из нескольких суперинструкций, техника описана в статье Atakua, ее можно несколько усовершествовать. Показала ускорение на 30% раза относительно его предыдущего варианта (tail-recursive).

** JIT-компиляция

Последний и самый затратный способ оптимизировать выполнение. Ускорение достигается за счет полного отказа от диспетчеризации и провязывания всех SSA-блок прямыми переходами. Ускорение не измерялось, общее ускорение будет зависеть от скорости работы JIT-компилятора
